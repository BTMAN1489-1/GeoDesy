# Generated by Django 5.0.6 on 2024-08-30 07:12

import django.db.models.deletion
import utils.custom_validators
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='FederalDistrict',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TFA',
            fields=[
                ('tfa_id', models.UUIDField(primary_key=True, serialize=False)),
                ('confirm_code', models.CharField()),
                ('expired_datetime_code', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(max_length=255, validators=[utils.custom_validators.validate_russian_text], verbose_name='Имя')),
                ('second_name', models.CharField(max_length=255, validators=[utils.custom_validators.validate_russian_text], verbose_name='Фамилия')),
                ('third_name', models.CharField(max_length=255, validators=[utils.custom_validators.validate_russian_text], verbose_name='Отчество')),
                ('sex', models.TextField(choices=[('male', 'Мужской'), ('female', 'Женский'), ('unknown', 'Другое')], validators=[utils.custom_validators.validate_russian_text], verbose_name='Пол')),
                ('email', models.EmailField(error_messages={'unique': 'Пользователь с таким email уже существует.'}, max_length=254, unique=True, verbose_name='Email')),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('last_login', models.DateTimeField(auto_now=True)),
                ('is_staff', models.BooleanField(default=False, verbose_name='Статус сотрудника')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'пользователь',
                'verbose_name_plural': 'пользователи',
            },
        ),
        migrations.CreateModel(
            name='FederalSubject',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(unique=True, verbose_name='Субъект РФ')),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='subjects', to='main_app.federaldistrict', verbose_name='Федеральный округ РФ')),
            ],
        ),
        migrations.CreateModel(
            name='GeoPoint',
            fields=[
                ('guid', models.UUIDField(primary_key=True, serialize=False)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='geo_points', to='main_app.federalsubject', verbose_name='Субъект РФ')),
            ],
            options={
                'verbose_name': 'координаты',
                'verbose_name_plural': 'координаты',
            },
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('card_uuid', models.UUIDField(primary_key=True, serialize=False)),
                ('status', models.TextField(choices=[('pending', 'В процессе проверки'), ('sending', 'Отправлено'), ('success', 'Принято'), ('denied', 'Отвергнуто')], verbose_name='Статус')),
                ('datetime_creation', models.DateTimeField(auto_now_add=True, verbose_name='Время создания (UTC-формат)')),
                ('execute_date', models.DateField(verbose_name='Дата проведения работ')),
                ('datetime_inspection', models.DateTimeField(default=None, null=True, verbose_name='Время последней проверки (UTC-формат)')),
                ('identification_pillar', models.JSONField(verbose_name='Опознавательный столб')),
                ('monolith_one', models.JSONField(verbose_name='Монолит I')),
                ('monolith_two', models.JSONField(verbose_name='Монолит II')),
                ('monolith_three_and_four', models.JSONField(verbose_name='Монолиты III и IV')),
                ('sign_height_above_ground_level', models.FloatField(verbose_name='Высота верхней марки')),
                ('sign_height', models.FloatField(verbose_name='Высота знака')),
                ('outdoor_sign', models.JSONField(verbose_name='Наружный знак')),
                ('ORP_one', models.JSONField(verbose_name='ОРП I')),
                ('ORP_two', models.JSONField(verbose_name='ОРП II')),
                ('trench', models.JSONField(verbose_name='Окопка')),
                ('satellite_surveillance', models.JSONField(verbose_name='Спутниковое наблюдение')),
                ('type_of_sign', models.JSONField(verbose_name='Тип знака')),
                ('point_index', models.CharField(blank=True, default=None, null=True, verbose_name='№ по каталогу/индекс пункта')),
                ('name_point', models.CharField(blank=True, default=None, null=True, verbose_name='Название пункта, класс, № марки')),
                ('year_of_laying', models.IntegerField(default=None, null=True, verbose_name='Год закладки')),
                ('type_of_center', models.CharField(blank=True, default=None, null=True, verbose_name='Тип центра')),
                ('height_above_sea_level', models.FloatField(blank=True, default=None, null=True, verbose_name='Высота над уровнем моря')),
                ('trapezoids', models.CharField(blank=True, default=None, null=True, verbose_name='Трапеции')),
                ('executor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='exec_cards', to=settings.AUTH_USER_MODEL)),
                ('inspector', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='inspect_cards', to=settings.AUTH_USER_MODEL)),
                ('coordinates', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='cards', to='main_app.geopoint', verbose_name='Координаты')),
            ],
            options={
                'verbose_name': 'карточка пункта ГГС',
                'verbose_name_plural': 'карточки пунктов ГГС',
            },
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.ImageField(upload_to='photos/%Y/%m/%d')),
                ('card_ref', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='photos', to='main_app.card')),
            ],
            options={
                'verbose_name': 'фотография',
                'verbose_name_plural': 'фотографии',
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('api_id', models.UUIDField(primary_key=True, serialize=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='geopoint',
            constraint=models.UniqueConstraint(fields=('latitude', 'longitude'), name='unique_coordinates'),
        ),
    ]
